dims <- lapply(subnames, length)
subtbl <- array(subarray, dims, dimnames = subnames)
class(subtbl) <- "table"
return(subtbl)
}
subtable(cttab, YES)
subtable(cttab, Yes)
subtable(cttab, "Yes")
subtable(cttab)
subtable(cttab,Vote.for.X)
subtable(cttab,"Vote.for.X")
subtable(cttab,list("Yes"))
names(cttab)
cttab
names(d)
table()d
t
n <- names(d)
n
t
str(t)
attr(t,"dimnames")
attr(t,"dimnames")
table(d,dimnames=names(d))
table(dimnames=names(d),d)
help(table)
d
lenght(d)
length(d)
names(d)
as.data.frame(d)
f <- as.data.frame(d)
f[Dalla]
str(f)
f$d
summary(f)
f
f$Doran
f$[1:2]
f[1:2]
f[1]
names(f)
names(f])
as.list(d)
l <- as.list(d)
l$Doran
max(l)
d <- degree(g)
l <- as.list(d)
l
max(d)
l$Tyrion
as.data.frame(l)
f <- as.data.frame(l)
f
max(d)
max(f)
str(f)
f$Tyrion
edit(f)
plot(f)
hist(f)
plot(f)
plot(d)
axis(1, 1:107, attr(d,"names"), col.axis = "blue")
subset()
help("subset")
help(subset(airquality, Temp > 80, select = c(Ozone, Temp))
)
subset(airquality, Temp > 80, select = c(Ozone, Temp))
d
fd <- as.data.frame(d)
f
fd
fd <- as.data.frame(d)
subset(fd,d>1)
subset(fd,d>5)
subset(fd,d>6)
subset(fd,d>10)
fd <- as.data.frame(d)
d[d>20]
# select variables v1, v2, v3
myvars <- c("v1", "v2", "v3")
newdata <- mydata[myvars]
# another method
myvars <- paste("v", 1:3, sep="")
newdata <- mydata[myvars]
# select 1st and 5th thru 10th variables
newdata <- mydata[c(1,5:10)]
top
plot(fd)
hist(fd)
hist(d)
hist(d,breaks=seq(0,50,by=0.5))
d
plot(d)
axis(1, 1:107, attr(d,"names"), col.axis = "blue")
row.names(d)
row.names(f)
row.names(l)
row.names(f)
text(wt, mpg, attr(d,"names"), cex=0.6, pos=4, col="red")
text(d, mpg, attr(d,"names"), cex=0.6, pos=4, col="red")
text(d, attr(d,"names"), cex=0.6, pos=4, col="red")
b <- betweenness(g)
b
str(b)
mode(b)
plot(b)
text(d, attr(d,"names"), cex=0.6, pos=4, col="red")
text(b, attr(b,"names"), cex=0.6, pos=4, col="red")
weights(g)
weights(d)
E(g)$weight
g
E(g)
E(g)$Weight
str(g)
plot(g, layout=layout.fruchterman.reingold, edge.label=E(g)$weight)
pa <- get.shortest.paths(g, 5, 9)[[1]]
pa
V(g)[pa]$color <- 'green'
V(g)
V(g)[pa]
mst <- minimum.spanning.tree(g)
mst
plot(mst, layout=layout.reingold.tilford,  edge.label=E(mst)$weight)
get.shortest.paths(g, 5, 9)
get.shortest.paths(g, 1, 9)
plot(g, layout=layout.reingold.tilford, vertex.label=NA, vertex.size=5,vertex.color="green")
plot(evcent(g)$vector, betweenness(g))
text(evcent(g)$vector, betweenness(g), 0:100, cex=0.6, pos=4)
V(g)[12]$color <- 'red'
V(g)[8]$color <- 'green'
plot(g, layout=lay, vertex.size=8, vertex.label.cex=0.6)
lay <- layout.fruchterman.reingold(g)
plot(g, layout=lay, vertex.size=8, vertex.label.cex=0.6)
plot(fc,g)
order(betweenness(g))
order(closeness(g))
transitivity(g, type="local")
g <- graph.data.frame(swords,directed = F)
closeness(g)
transitivity(g, type="local")
evcent(g)$vector
order(betweenness(g))
order(evcent(g)$vector)
V(g)[32]$color <- 'red'
V(g)[54]$color <- 'green'
plot(g, layout=lay, vertex.size=8, vertex.label.cex=0.6)
data(karate)
rainbow(12)
rainbow(16)
rainbow(12)[1]
rainbow(12)[2]
V(g)[32]$color <- rainbow[7][1]
V(g)[54]$color <- rainbow[7][2]
V(g)[64]$color <- rainbow[7][3]
V(g)[17]$color <- rainbow[7][4]
V(g)[53]$color <- rainbow[7][5]
V(g)[59]$color <- rainbow[7][6]
V(g)[62]$color <- rainbow[7][7]
V(g)[32]$color <- rainbow(7)[1]
V(g)[54]$color <- rainbow(7)[2]
V(g)[64]$color <- rainbow(7)[3]
V(g)[17]$color <- rainbow(7)[4]
V(g)[53]$color <- rainbow(7)[5]
V(g)[59]$color <- rainbow(7)[6]
V(g)[62]$color <- rainbow(7)[7]
plot(g, layout=lay, vertex.size=8, vertex.label.cex=0.6)
shortest.paths(g)
d
degree(d)
degree(g)
plot(fc,g)
degree(g)
d <- degree(g)
d[d>20]
l <- as.list(d)
max(d)
l$Tyrion
f <- as.data.frame(d)
f$Tyrion
fnew <- edit(f)
fd <- as.data.frame(d)
subset(fd,d>10)
fd
d <- degree(g)
d
table(d)
plot(d)
t <- table(d)
plot(g, layout=lay, vertex.size=8, vertex.label.cex=0.6)
plot(g, layout=layout.fruchterman.reingold)
pa <- get.shortest.paths(g, 5, 9)[[1]]
pa
V(g)[pa]$color <- 'green'
V(g)
V(g)[Arya]
V(g)["Arya"]
V(g)["Arya","Bran"]
V(g)["Arya","Bran"]$color <- 'green'
V(g)["Arya"]$color <- 'green'
V(g)["Bran"]$color <- 'green'
E(g)$color <- 'grey'
plot(g, layout=layout.fruchterman.reingold)
E(g, path=pa)$color <- 'red'
help(E)
E(G)
E(g)
E(g, path=Arya-Anguy)
E(g, path="Arya-Anguy")
E(g)["Arya"]
E(g)["Arya","Anguy"]
V(g)$names
str(E(g))
E(g)["Aemon|Grenn"]
E(g)["Aemon|Grenn"]
pa <- get.shortest.paths(g, 5, 9)[[1]]
pa <- get.shortest.paths(g, 5, 9)[[1]];pa
E(g, path="Aemon|Bran")$color <- 'red'
E(g, path="Aemon|Bran")
E(g, path="Aemon-Bran")
E(g)["Aemon|Bran"]
E(g)["Aemon|Grenn"]
pa <- get.shortest.paths(g, 5, 9)
pa
pa <- get.shortest.paths(g, 5, 9)[[1]];pa
pa <- get.shortest.paths(g, 1, 9)[[1]];pa
pa <- get.shortest.paths(g, 1, 9);pa
d
plot(g, layout=layout.fruchterman.reingold)
get.shortest.paths(g, "Illyrio", "Belwas")
E(g, path="Illyrio|Belwas")$color <- 'red'
E(g, path="Illyrio|Belwas")
E(g, path="Illyrio-Belwas")
E(g, path="Illyrio Belwas")
E(g, path="Illyrio,Belwas")
E(g, path=c("Illyrio","Belwas"))
E(g, path=c("Illyrio","Belwas"))$color <- 'red'
E(g, path=c("Illyrio","Belwas"))$width <- 3
plot(g, layout=layout.fruchterman.reingold)
V(g)["Arya"]$color <- 'green'
V(g)["Bran"]$color <- 'green'
plot(g, layout=layout.fruchterman.reingold)
V(g)["Arya"]
str(V(g)["Arya"])
V(g)[62]evcent(g)$vector
evcent(g)$vector
betweenness(g)
str(V(g)[62])
str(V(g)["Illyrio"])
V(g)["Illyrio"]$color <- 'green'
V(g)["Belwas"]$color <- 'green'
E(g)$color <- 'grey'
E(g, path=c("Illyrio","Belwas"))$color <- 'red'
E(g, path=c("Illyrio","Belwas"))$width <- 3
plot(g, layout=layout.fruchterman.reingold)
pa <- get.shortest.paths(g, "Davos", "Val")[[1]];pa
str(pa)
V(g)[pa]$color <- 'green'
help(V)
as.array(pa)
ss <- as.array(pa)
V(g)[ss]$color <- 'green'
names(pa)
summary(pa)
pa
mode(pa)
pa[1]
pa[2]
pa[[1]]
g <- graph.data.frame(swords,directed = F)
V(g)["Davos"]$color <- 'green'
V(g)["Melisandre"]$color <- 'green'
V(g)["Jon"]$color <- 'green'
V(g)["Val"]$color <- 'green'
E(g)$color <- 'grey'
E(g, path=c("Davos","Melisandre","Jon","Val"))$color <- 'red'
E(g, path=c("Davos","Melisandre","Jon","Val"))$width <- 3
plot(g, layout=layout.fruchterman.reingold)
apply(pa,function(x) 10 * x)
apply(pa,1,function(x) 10 * x)
apply(pa,1,function(x) print X = )
apply(pa,1,function(x) print x)
apply(pa,1,function(x) (print x)
apply(pa,1,function(x) (print x))
apply(pa,1,function(x){print x})
apply(pa,1,function(x) {print x})
x <- array(1:9)
x
pa
pa[1]
as.array(pa)
a <- as.array(pa)
a
a[1]
a <- as.array(pa[[1]])
a
str(pa)
pa$atomic
attributes(pa)
pa$res
sp <- all_shortest_paths(g, 5, 70)
sp$res
mat <- sapply(sp$res, as_ids)
mat
df <- as.data.frame(t(mat))
df
mat
V(g)[mat]$color <- 'green'
pa <- all_shortest_paths(g, "Davos", "Val")[[1]];pa
mat <- sapply(sp$res, as_ids)
V(g)[mat]$color <- 'green'
E(g)$color <- 'grey'
E(g, path=mat)$color <- 'red'
E(g, path=mat)$width <- 3
plot(g, layout=layout.fruchterman.reingold)
g <- graph.data.frame(swords,directed = F)
plot(g, layout=layout.fruchterman.reingold)
pa <- all_shortest_paths(g, "Davos", "Val")[[1]];pa
mat <- sapply(sp$res, as_ids)
V(g)[mat]$color <- 'green'
E(g)$color <- 'grey'
E(g, path=mat)$color <- 'red'
E(g, path=mat)$width <- 3
plot(g, layout=layout.fruchterman.reingold)
g <- graph.data.frame(swords,directed = F)
plot(g, layout=layout.fruchterman.reingold)
pa <- all_shortest_paths(g, "Illyric", "Hodor")[[1]];pa
mat <- sapply(sp$res, as_ids)
V(g)[mat]$color <- 'green'
E(g)$color <- 'grey'
E(g, path=mat)$color <- 'red'
E(g, path=mat)$width <- 3
plot(g, layout=layout.fruchterman.reingold)
pa <- all_shortest_paths(g, "Illyric", "Hodor")[[1]]
pa <- all_shortest_paths(g, "Davos", "Hodor")[[1]];pa
pa <- all_shortest_paths(g, "Davos", "Doran")[[1]];pa
pa <- all_shortest_paths(g, "Davos", "Amory")[[1]];pa
pa <- all_shortest_paths(g, "Karl", "Amory")[[1]];pa
g <- graph.data.frame(swords,directed = F)
pa <- all_shortest_paths(g, "Davos", "Amory")[[1]];pa
mat <- sapply(sp$res, as_ids)
V(g)[mat]$color <- 'green'
E(g)$color <- 'grey'
E(g, path=mat)$color <- 'red'
E(g, path=mat)$width <- 3
plot(g, layout=layout.fruchterman.reingold)
V(g)[mat]
sp$res
sp
pa <- all_shortest_paths(g, "Davos", "Amory")[[1]];pa
pa <- all_shortest_paths(g, "Davos", "Amory")[[1]];pa
pa <- all_shortest_paths(g, "Davos", "Amory")[[1]];pa
pa <- all_shortest_paths(g, "Davos", "Amory")[[1]];pa
pa <- all_shortest_paths(g, "Davos", "Amory")[[1]];pa
pa <- all_shortest_paths(g, "Davos", "Amory")[[1]];pa
pa <- all_shortest_paths(g, "Davos", "Amory")[[1]];pa
pa <- all_shortest_paths(g, "Davos", "Amory")[[1]];pa
mat <- sapply(sp$res, as_ids)
amt
mat
g <- graph.data.frame(swords,directed = F)
sp <- all_shortest_paths(g, "Davos", "Amory")[[1]];sp
mat <- sapply(sp$res, as_ids)
V(g)[mat]$color <- 'green'
E(g)$color <- 'grey'
E(g, path=mat)$color <- 'red'
E(g, path=mat)$width <- 3
plot(g, layout=layout.fruchterman.reingold)
mat
sp[[1]]
mat <- sapply(sp[[1]]$res, as_ids);mat
sp[[1]]
sp[[1]]$res
sp$res
sp <- all_shortest_paths(g, 5, 70)
str(sp)
sp$res
shortest.paths(g)
shortest.paths(g)
get.shortest.paths(g, 5)
sp <- all_shortest_paths(g, 5, 70)pa <- get.shortest.paths(g, "Davos", "Val")[[1]];pa
pa <- get.shortest.paths(g, "Davos", "Val")[[1]];pa
pa <- get.shortest.paths(g, "Davos", "Val",output='epath')[[1]];pa
pa <- get.shortest.paths(g, "Davos", "Val",output='epath')[[1]]
pa
pa <- get.shortest.paths(g, "Davos", "Val",output='epath');pa
pa$epath
pa$epath[[1]]
pa <- get.shortest.paths(g, "Davos", "Val",output='vpath');pa
pa <- get.shortest.paths(g, "Davos", "Val");pa
pa <- get.shortest.paths(g, "Davos", "Val")[[1]];pa
pa
str(pa)
pa$:Class
class(pa)
distMatrix <- shortest.paths(g, v=V(g), to=V(g))
distMatrix
path.length.hist(g)$res
path.length.hist(g)
pa <- get.shortest.paths(g, "Davos", "Val",to=V(graph))[[1]];pa
pa <- get.shortest.paths(g, "Davos", "Val",to=V(graph));pa
pa <- get.shortest.paths(g, "Davos", "Val",to=V(graph),mode = c("all", "out",
"in"));pa
pa <- get.shortest.paths(g, "Davos", "Val",to=V(graph),mode = c("all", "out","in"));pa
pa <- get.shortest.paths(g, "Davos", "Val",to=V(graph),mode = c("all", "out","in"))
pa <- get.shortest.paths(g, to=V(graph),mode = c("all", "out","in"));pa
pa <- get.shortest.paths(g, from,to=V(graph),mode = c("all", "out","in"));pa
get.shortest.paths(g, from, to=V(graph), mode = c("all", "out","in"), weights = NULL)
get.shortest.paths(g, from, to=V(g), mode = c("all", "out","in"), weights = NULL)
pa <- get.shortest.paths(g, "Davos", "Val")[[1]];pa
pa
str(pa)
is.object(pa)
is.list
is.list(pa)
as.data.frame(pa)
mat <- sapply(pa, as_ids)
mat
g <- graph.data.frame(swords,directed = F)
plot(g, layout=layout.fruchterman.reingold)
E(g)["Illyrio|Belwas"]
pa <- get.shortest.paths(g, "Davos", "Val")[[1]];pa
mat <- sapply(pa, as_ids);mat
V(g)[mat]$color <- 'green'
E(g)$color <- 'grey'
E(g, path=mat)$color <- 'red'
E(g, path=mat)$width <- 3
plot(g, layout=layout.fruchterman.reingold)
g <- graph.data.frame(swords,directed = F)
plot(g, layout=layout.fruchterman.reingold)
E(g)["Illyrio|Belwas"]
pa <- get.shortest.paths(g, "Davos", "Amory")[[1]];pa
mat <- sapply(pa, as_ids);mat
V(g)[mat]$color <- 'green'
E(g)$color <- 'grey'
E(g, path=mat)$color <- 'red'
E(g, path=mat)$width <- 3
plot(g, layout=layout.fruchterman.reingold)
g <- graph.data.frame(swords,directed = F)
plot(g, layout=layout.fruchterman.reingold)
E(g)["Illyrio|Belwas"]
pa <- get.shortest.paths(g, "Karl", "Amory")[[1]];pa
mat <- sapply(pa, as_ids);mat
V(g)[mat]$color <- 'green'
E(g)$color <- 'grey'
E(g, path=mat)$color <- 'red'
E(g, path=mat)$width <- 3
plot(g, layout=layout.fruchterman.reingold)
as_ids(V(g))
as_ids(E(g))
# Create the graph and assign random edge weights
g <- erdos.renyi.game(12, 0.35)
E(g)$weight <- round(runif(length(E(g))),2) * 50
plot(g, layout=layout.fruchterman.reingold, edge.label=E(g)$weight)
# Compute the minimum spanning tree
mst <- minimum.spanning.tree(g)
plot(mst, layout=layout.reingold.tilford,  edge.label=E(mst)$weight)
g <- graph.data.frame(swords,directed = F)
mst <- minimum.spanning.tree(g)
plot(mst, layout=layout.reingold.tilford,  edge.label=E(mst)$Weight)
g <- graph.data.frame(swords,directed = F)
plot(g, layout=layout.fruchterman.reingold, edge.label=E(g)$Weight)
mst <- minimum.spanning.tree(g)
plot(mst, layout=layout.reingold.tilford,  edge.label=E(mst)$Weight)
clusters(g, mode="weak")
clusters(g, mode="strong")
plot(degree.distribution(g), xlab="node degree")
lines(degree.distribution(g))
reciprocity(g)
diameter(g)
graph.density(g)
clusters(g)
clusters(g)
plot(g, layout=layout.fruchterman.reingold, vertex.label=NA, vertex.size=3)
shortest.paths(g)
edge.connectivity(g, 1, 79)
lay <- layout.fruchterman.reingold(g)
plot(evcent(g)$vector, betweenness(g))
text(evcent(g)$vector, betweenness(g), 0:100, cex=0.6, pos=4)
V(g)[32]$color <- rainbow(7)[1]
V(g)[54]$color <- rainbow(7)[2]
V(g)[64]$color <- rainbow(7)[3]
V(g)[17]$color <- rainbow(7)[4]
V(g)[53]$color <- rainbow(7)[5]
V(g)[59]$color <- rainbow(7)[6]
V(g)[62]$color <- rainbow(7)[7]
plot(g, layout=lay, vertex.size=8, vertex.label.cex=0.6)
order(evcent(g)$vector)
order(betweenness(g))
order(closeness(g))
order(degree(g))
degree(g)
degree(g)[64]
degree(V(g)["Jon"])
V(g)["Jon"]
ecount(g)
vcount(g)
V(g)["Jon"]
str(V(g)["Jon"])
as_ids(V(g)["Jon"])
degree(as_ids(V(g)["Jon"]))
help(degree)
degree(g,v=V(g)["Jon"])
degree(g,v=V(g)["Tyrion"])
degree(g,v=V(g)["Jon"])
degree(g,v=V(g)["Sansa"])
degree(g,v=V(g)["Sansa"])
dger
degree(g,v=V(g)["Sansa"])
