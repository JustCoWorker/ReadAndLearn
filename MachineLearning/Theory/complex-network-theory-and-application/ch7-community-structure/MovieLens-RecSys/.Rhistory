read.table("movices.dat", sep = "::")
read.table("movices.dat", sep = "::")
read.table("movices.dat", sep = "::")
read.table("movices.dat")
read.table("movices.dat")
read.table("movies.dat")
read.table("movies.dat")
read.table("movies.dat",sep = "::")
read.table("movies.dat",sep = "::")
read.csv("movies.dat",sep = "::")
read.table("movies.dat",sep = "::",fill=TRUE)
read.table("movies.dat",sep = "\:\:",fill=TRUE)
read.table("movies.dat",sep = "\t",fill=TRUE)
read.table("movies.dat",sep = "::",T)
t <- read.table("movies.dat",sep = "::",T)
?recommenderlab::realRatingMatrix
?recommenderlab::realRatingMatrix
install.packages("recommenderlab")
?recommenderlab::realRatingMatrix
library("recommenderlab")
data("MovieLense")
### use only users with more than 100 ratings
MovieLense100 <- MovieLense[rowCounts(MovieLense) >100,]
MovieLense100
train <- MovieLense100[1:50]
rec <- Recommender(train, method = "UBCF")
rec
pre <- predict(rec, MovieLense100[101:102], n = 10)
pre
as(pre, "list")
View(MovieLense)
view(MovieLense)
edit(MovieLense)
ratings.movie <- data.frame(ratings = getRatings(MovieLense))
summary(ratings.movie$ratings)
view(ratings.movie)
edit(ratings.movie)
ggplot(ratings.movie, aes(x = ratings)) + geom_histogram(fill = "beige", color = "black",
binwidth = 1, alpha = 0.7) + xlab("rating") + ylab("count")
library(recommenderlab)
library(ggplot2)
data(MovieLense)
image(MovieLense)
# 获取评分
ratings.movie <- data.frame(ratings = getRatings(MovieLense))
summary(ratings.movie$ratings)
## Min. 1st Qu. Median Mean 3rd Qu. Max.
## 1.00 3.00 4.00 3.53 4.00 5.00
ggplot(ratings.movie, aes(x = ratings)) + geom_histogram(fill = "beige", color = "black",
binwidth = 1, alpha = 0.7) + xlab("rating") + ylab("count")
movie.count <- data.frame(count = rowCounts(MovieLense))
ggplot(movie.count, aes(x = count)) + geom_histogram(fill = "beige", color = "black",
alpha = 0.7) + xlab("counts of users") + ylab("counts of movies rated")
str(MovieLense)
ml100k <- read.table("users.dat", header = F, stringsAsFactors = T)
head(ml100k)
prop.table(table(ml100k[, 3]))
ml100k <- ml100k[, -4]
prop.table(table(ml100k[, 3]))
prop.table(table(ml100k[, 1]))
prop.table(table(ml100k))
ml100k[,3]
ml100k
ml100k <- ml100k[, -4]
ml100k <- read.table("users.dat", header = F, stringsAsFactors = T)
ml100k
ml100k <- ml100k[, -4]
ml100k
head(ml100k)
ml100k <- read.table("users.dat", header = F, stringsAsFactors = T)
head(ml100k)
ml100k[,3]
ml100k <- read.table("users.dat", sep="::",header = F, stringsAsFactors = T)
ml100k <- read.table("users.dat", sep="::",T,header = F, stringsAsFactors = T)
ml100k <- read.table("users.dat", sep="::",header = F, stringsAsFactors = T)
t <- read.table("movies.dat",sep = "::",T)
ml100k <- read.table("u.data", header = F, stringsAsFactors = T)
head(ml100k)
ml100k <- ml100k[, -4]
ml100k[,3]
table(ml100k[,3])
prop.table(table(ml100k[,3]))
summary(ml100k[, 3])
library(reshape)
ml100k <- cast(ml100k, V1 ~ V2, value = "V3")
ml.useritem[1:3, 1:6]
m1
ml
ml100k.useritem[1:3, 1:6]
ml100k <- cast(ml100k, V1 ~ V2, value = "V3")
ml100k[,3]
table(ml100k[,3])
prop.table(table(ml100k[,3]))
ml100k <- ml100k[, -4]
ml100k[,3]
table(ml100k[,3])
prop.table(table(ml100k[,3]))
summary(ml100k[, 3])
library(reshape)
ml100k <- cast(ml100k, V1 ~ V2, value = "V3")
ml100k <- cast(ml100k, V1 ~ V2, value = "V3")
ml <- cast(ml100k, V1 ~ V2, value = "V3")
ml100k
ml100k <- read.table("u.data", header = F, stringsAsFactors = T)
head(ml100k)
ml100k <- ml100k[, -4]
ml100k[,3]
ml100k
library(reshape)
ml <- cast(ml100k, V1 ~ V2, value = "V3")
ml.useritem[1:3, 1:6]
ml
str(ml)
mlclass(ml.useritem)
class(ml.useritem)
ml.useritem <- cast(ml100k, V1 ~ V2, value = "V3")
str(ml)
ml.useritem[1:3, 1:6]
class(ml.useritem)
class(ml.useritem) <- "data.frame"    ##只保留data.frame的类属性
class(ml.useritem)
ml.useritem <- as.matrix(ml.useritem)
class(ml.useritem)
ml.useritem
ml.ratingMatrix <- as(ml.useritem, "realRatingMatrix")  ##转换为realRatingMatrix
ml.ratingMatrix
as(ml.ratingMatrix , "matrix")[1:3, 1:10]
as(ml.ratingMatrix , "list")[[1]][1:10]
colnames(ml.ratingMatrix) <- paste("M", 1:1682, sep = "")
colnames(ml.ratingMatrix)
paste("M", 1:1682, sep = "")
colnames(ml.ratingMatrix) <- paste("M", 1:1682, sep = "")
colnames(ml.ratingMatrix)
paste("M", 1:1682, sep = "")
ml100k <- read.table("u.data", header = F, stringsAsFactors = T)
head(ml100k)
ml100k <- ml100k[, -4]
ml100k[,3]
table(ml100k[,3])
prop.table(table(ml100k[,3]))
summary(ml100k[, 3])
ml100k
library(reshape)
ml.useritem <- cast(ml100k, V1 ~ V2, value = "V3")
ml.useritem[1:3, 1:6]
class(ml.useritem)
class(ml.useritem) <- "data.frame"    ##只保留data.frame的类属性
ml.useritem <- as.matrix(ml.useritem)
ml.ratingMatrix <- as(ml.useritem, "realRatingMatrix")  ##转换为realRatingMatrix
ml.ratingMatrix
ml.useritem <- as.matrix(ml.useritem)
ml.useritem <- cast(ml100k, V1 ~ V2, value = "V3")
ml.useritem[1:3, 1:6]
ml100k <- read.table("u.data", header = F, stringsAsFactors = T)
head(ml100k)
ml100k <- ml100k[, -4]
ml100k[,3]
table(ml100k[,3])
prop.table(table(ml100k[,3]))
summary(ml100k[, 3])
ml100k
library(reshape)
ml.useritem <- cast(ml100k, V1 ~ V2, value = "V3")
ml.useritem[1:3, 1:6]
ml.useritem
mode(ml.useritem)
class(ml.useritem)
class(ml.useritem) <- "data.frame"    ##只保留data.frame的类属性
mode(ml.useritem)
ml.useritem <- as.matrix(ml.useritem)
view(ml.useritem)
edit(ml.useritem)
ml.ratingMatrix <- as(ml.useritem, "realRatingMatrix")  ##转换为realRatingMatrix
library(recommenderlab)
ml.ratingMatrix <- as(ml.useritem, "realRatingMatrix")  ##转换为realRatingMatrix
ml.ratingMatrix
as(ml.ratingMatrix , "matrix")[1:3, 1:10]
as(ml.ratingMatrix , "list")[[1]][1:10]
ml.ratingMatrix
colnames(ml.ratingMatrix) <- paste("M", 1:1682, sep = "")
str(ml.ratingMatrix)
as(ml.ratingMatrix[1,1:10], "list")
as(ml.ratingMatrix[1,], "list")
as(ml.ratingMatrix[1:2,], "list")
str(ml.ratingMatrix)
mode(ml.ratingMatrix)
ml.ratingMatrix[-1]
ml.ratingMatrix <- ml.ratingMatrix[-1]
colnames(ml.ratingMatrix) <- paste("M", 1:1682, sep = "")
as(ml.ratingMatrix[1,1:10], "list")
ml.ratingMatrix <- as(ml.useritem, "realRatingMatrix")  ##转换为realRatingMatrix
ml.ratingMatrix
ml.ratingMatrix[1,1:10]
ml.ratingMatrix[1,1:10,"list"]
ml.ratingMatrix(1,1:10,"list")
as(ml.ratingMatrix , "matrix")[1:3, 1:10]
as(ml.ratingMatrix , "list")[[1]][1:10]
recommenderRegistry$get_entries(dataType = "realRatingMatrix")
ml.recommModel <- Recommender(ml.ratingMatrix[1:800], method = "IBCF")
ml.recommModel
ml.predict1 <- predict(ml.recommModel, ml.ratingMatrix[801:803], n = 5)
ml.predict1
as( ml.predict1, "list")
ml.predict2 <- predict(ml.recommModel, ml.ratingMatrix[801:803], type = "ratings")
ml.predict2
as(ml.predict2, "matrix")[1:3, 1:6]
as(ml.predict2, "matrix")[1:3, 2:7]
as(ml.predict2, "matrix")[1:3, 2:8]
as(ml.predict2, "matrix")[1:3, 2:7]
library(recommenderlab)
ml100k <- read.table("u.data", header = F, stringsAsFactors = T)
head(ml100k)
ml100k <- ml100k[, -4]
ml100k[,3]
table(ml100k[,3])
prop.table(table(ml100k[,3]))
summary(ml100k[, 3])
ml100k
str(ml100k)
g <- graph.data.frame(ml100k,directed = F)
library(igraph)
library(ape)
g <- graph.data.frame(ml100k,directed = F)
dgree(g)
degree(g)
is.directed(g)
fc <- fastgreedy.community(g)
plot(fc,g)
ml100k[!duplicated(ml100k$x), ]
g <- graph.data.frame(ml100k,directed = F)
fc <- fastgreedy.community(g)
base::unique(ml100k)
mk100k
ml100k
g <- graph.data.frame(ml100k,directed = F)
fc <- fastgreedy.community(g)
simplify()
help(simply)
help("simplify")
is_simple
is_simple(g)
is_simple(simplify(g))
is_simple(simplify(g))
sg <- simplify(g)
fc <- fastgreedy.community(sg)
plot(fc,g)
dendPlot(fc, mode="hclust")
degree(g)
closeness(g)
order(betweenness(g))
edit(order(betweenness(g)))
betweenness(g)
edit(betweenness(g))
transitivity(g, type="local")
library(dplyr)
mtcars_df = tbl_df(mtcars)
filter(mtcars_df, hp<110 & vs == 1)
library(recommenderlab)
ml100k <- read.table("u.data", header = F, stringsAsFactors = T)
head(ml100k)
ml100k <- ml100k[, -4]
ml100k[,3]
table(ml100k[,3])
prop.table(table(ml100k[,3]))
summary(ml100k[, 3])
ml100k
library(reshape)
#将ml110k数据框压扁
ml.useritem <- cast(ml100k, V2 ~ V1, value = "V3")
ml.useritem[1:3, 1:6]
edit(ml.useritem)
ml.itemuser <- dcast(ml100k, V2 ~ V1, value = "V3")
ml.itemuser[1:3, 1:6]
library(reshape2)
ml.itemuser <- dcast(ml100k, V2 ~ V1, value = "V3")
ml.itemuser[1:3, 1:6]
edit(ml.itemuser)
mode(ml.itemuser)
subset(ml.itemuser,)
ml.itemuser <- dcast(ml100k, V2 ~ V1, value = "count")
ml.itemuser[1:3, 1:6]
ml.itemuser[1:3, 1:6]
ml.itemuser <- dcast(ml100k, V2 ~ V1, value.var = "count")
ml.itemuser <- dcast(ml100k, V2 ~ V1, value.var = "V3")
ml.itemuser[1:3, 1:6]
help(dcast)
ml.itemuser <- dcast(ml100k, V2 ~ V1, value.var = "V3", fill=0)
ml.itemuser[1:3, 1:6]
ml.itemuser <- dcast(ml100k, V2 ~ V1, length(), fill=0)
ml.itemuser <- dcast(ml100k, V2 ~ V1, length, fill=0)
ml.itemuser[1:3, 1:6]
ml.itemuser
edit(ml.itemuser)
ml.itemuser[1:3, 1:6]
ml.itemuser <- dcast(ml100k, V2 ~ V1, length, fill=0)
edit(ml.itemuser)
ml.itemuser <- dcast(ml100k, V2 ~ V1, value.var = "V3")
ml.itemuser.length <- dcast(ml100k, V2 ~ V1, length, fill=0)
ml.itemuser[1:3, 1:6]
ml.itemuser.length[1:3, 1:6]
ml.itemuser <- dcast(ml100k, V2 ~ V1, value.var = "V3", fill=0)
ml.itemuser[1:3, 1:6]
str(ml.itemuser.length)
ml.itemuser.length$`1`
ml.length <- dcast(ml100k, V2 ~ V1, length, fill=0)
ml.length$1 * t(ml.length$2)
ml.length$1 * ml.length$2
ml.length$`1` * ml.length$`2`
ml.length$`1` * t(ml.length$`2`)
ml.length$`1`
mode(ml.length$`1`)
mode(ml.length$`2`)
ml.matrix <- as.matrix(ml.length)
ml.matrix
edit(ml.matrix)
ml.matrix %*% ml.matrix
ml.matrix * ml.matrix
re <- ml.matrix * ml.matrix
edit(re)
ml.length <- ml.length[,-1]
ml.length
edit(ml.length)
ml.length[0]
ml.length[1]
t(ml.length[1])
edit(t(ml.length[1]))
ml.length[1]*ml.length[2]
as.matric(ml.length[2])
m2 <- as.matrix(ml.length[2])
m2
m2 <- as.matrix(ml.length[,2])
m2
ml.length$`1`
ml.length[[1]]
edit(ml.length[[1]])
ml.m <- as.matrix(ml.length)
ml.m[1]
ml.m[2]
ml.m
dim(ml.m)
