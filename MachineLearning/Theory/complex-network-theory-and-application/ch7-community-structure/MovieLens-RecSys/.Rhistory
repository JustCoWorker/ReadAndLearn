read.table("movices.dat", sep = "::")
read.table("movices.dat", sep = "::")
read.table("movices.dat", sep = "::")
read.table("movices.dat")
read.table("movices.dat")
read.table("movies.dat")
read.table("movies.dat")
read.table("movies.dat",sep = "::")
read.table("movies.dat",sep = "::")
read.csv("movies.dat",sep = "::")
read.table("movies.dat",sep = "::",fill=TRUE)
read.table("movies.dat",sep = "\:\:",fill=TRUE)
read.table("movies.dat",sep = "\t",fill=TRUE)
read.table("movies.dat",sep = "::",T)
t <- read.table("movies.dat",sep = "::",T)
?recommenderlab::realRatingMatrix
?recommenderlab::realRatingMatrix
install.packages("recommenderlab")
?recommenderlab::realRatingMatrix
library("recommenderlab")
data("MovieLense")
### use only users with more than 100 ratings
MovieLense100 <- MovieLense[rowCounts(MovieLense) >100,]
MovieLense100
train <- MovieLense100[1:50]
rec <- Recommender(train, method = "UBCF")
rec
pre <- predict(rec, MovieLense100[101:102], n = 10)
pre
as(pre, "list")
View(MovieLense)
view(MovieLense)
edit(MovieLense)
ratings.movie <- data.frame(ratings = getRatings(MovieLense))
summary(ratings.movie$ratings)
view(ratings.movie)
edit(ratings.movie)
ggplot(ratings.movie, aes(x = ratings)) + geom_histogram(fill = "beige", color = "black",
binwidth = 1, alpha = 0.7) + xlab("rating") + ylab("count")
library(recommenderlab)
library(ggplot2)
data(MovieLense)
image(MovieLense)
# 获取评分
ratings.movie <- data.frame(ratings = getRatings(MovieLense))
summary(ratings.movie$ratings)
## Min. 1st Qu. Median Mean 3rd Qu. Max.
## 1.00 3.00 4.00 3.53 4.00 5.00
ggplot(ratings.movie, aes(x = ratings)) + geom_histogram(fill = "beige", color = "black",
binwidth = 1, alpha = 0.7) + xlab("rating") + ylab("count")
movie.count <- data.frame(count = rowCounts(MovieLense))
ggplot(movie.count, aes(x = count)) + geom_histogram(fill = "beige", color = "black",
alpha = 0.7) + xlab("counts of users") + ylab("counts of movies rated")
str(MovieLense)
ml100k <- read.table("users.dat", header = F, stringsAsFactors = T)
head(ml100k)
prop.table(table(ml100k[, 3]))
ml100k <- ml100k[, -4]
prop.table(table(ml100k[, 3]))
prop.table(table(ml100k[, 1]))
prop.table(table(ml100k))
ml100k[,3]
ml100k
ml100k <- ml100k[, -4]
ml100k <- read.table("users.dat", header = F, stringsAsFactors = T)
ml100k
ml100k <- ml100k[, -4]
ml100k
head(ml100k)
ml100k <- read.table("users.dat", header = F, stringsAsFactors = T)
head(ml100k)
ml100k[,3]
ml100k <- read.table("users.dat", sep="::",header = F, stringsAsFactors = T)
ml100k <- read.table("users.dat", sep="::",T,header = F, stringsAsFactors = T)
ml100k <- read.table("users.dat", sep="::",header = F, stringsAsFactors = T)
t <- read.table("movies.dat",sep = "::",T)
ml100k <- read.table("u.data", header = F, stringsAsFactors = T)
head(ml100k)
ml100k <- ml100k[, -4]
ml100k[,3]
table(ml100k[,3])
prop.table(table(ml100k[,3]))
summary(ml100k[, 3])
library(reshape)
ml100k <- cast(ml100k, V1 ~ V2, value = "V3")
ml.useritem[1:3, 1:6]
m1
ml
ml100k.useritem[1:3, 1:6]
ml100k <- cast(ml100k, V1 ~ V2, value = "V3")
ml100k[,3]
table(ml100k[,3])
prop.table(table(ml100k[,3]))
ml100k <- ml100k[, -4]
ml100k[,3]
table(ml100k[,3])
prop.table(table(ml100k[,3]))
summary(ml100k[, 3])
library(reshape)
ml100k <- cast(ml100k, V1 ~ V2, value = "V3")
ml100k <- cast(ml100k, V1 ~ V2, value = "V3")
ml <- cast(ml100k, V1 ~ V2, value = "V3")
ml100k
ml100k <- read.table("u.data", header = F, stringsAsFactors = T)
head(ml100k)
ml100k <- ml100k[, -4]
ml100k[,3]
ml100k
library(reshape)
ml <- cast(ml100k, V1 ~ V2, value = "V3")
ml.useritem[1:3, 1:6]
ml
str(ml)
mlclass(ml.useritem)
class(ml.useritem)
ml.useritem <- cast(ml100k, V1 ~ V2, value = "V3")
str(ml)
ml.useritem[1:3, 1:6]
class(ml.useritem)
class(ml.useritem) <- "data.frame"    ##只保留data.frame的类属性
class(ml.useritem)
ml.useritem <- as.matrix(ml.useritem)
class(ml.useritem)
ml.useritem
ml.ratingMatrix <- as(ml.useritem, "realRatingMatrix")  ##转换为realRatingMatrix
ml.ratingMatrix
as(ml.ratingMatrix , "matrix")[1:3, 1:10]
as(ml.ratingMatrix , "list")[[1]][1:10]
colnames(ml.ratingMatrix) <- paste("M", 1:1682, sep = "")
colnames(ml.ratingMatrix)
paste("M", 1:1682, sep = "")
colnames(ml.ratingMatrix) <- paste("M", 1:1682, sep = "")
colnames(ml.ratingMatrix)
paste("M", 1:1682, sep = "")
